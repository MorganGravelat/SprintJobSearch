//Question 1
class DivisionByZero extends Exception {
	public String toString() {
		return "9";
	}
}

public class Main {
	public static void main(String args[]) {
		try {
			int x = 1, y = 3;
			System.out.print(y / x - x);
			throw new DivisionByZero();
		} catch (DivisionByZero dbz) {
			System.out.print(dbz);
		} catch (Exception e) {
			System.out.print("1");
		} finally {
			System.out.print("1");
		}

	}
}
//Question 2
public class Main {
	public static void main(String args[]) {
		System.out.println(3/2 + 3.0/2 + 3%2);

	}
}

//Question 3
class SomeClass{
	private int data;
	public SomeClass (int data) {
		this.data = data;
	}
	public void print (int data) {
		System.out.print(data);
	}
}
public class Main {
	public static void main(String args[]) {
		int data = 1;
		SomeClass someObject = new SomeClass();
		someObject.print(2);
		System.out.print(data);
	}
}

//Question 4
public class Main {
	public static void main(String args[]) {
		String myString = null;

		try {
			System.out.print(myString.length() + 5);
			System.out.print("1");
		} catch (NullPointerException npe) {
			System.out.print("1");
		} catch (Exception e) {
			System.out.print("1");
		} finally {
			System.out.print("1");
		}
	}
}
//Question 5
public class Main {
	public static void main(String args[]) {

		boolean goAgain = true;

		while (goAgain == true) {
			int x = 5 / 0;
			try {
				if (goAgain == false)
					System.out.print(x);
				goAgain = false;
				System.out.print("1");
			} catch (Exception e) {
				goAgain = true;
				System.out.print("2");
			} finally {
				System.out.print("3");
				goAgain = false;
			}
		} // end of while
	}
}
//Question 6
public class Main {
	public static void main(String args[]) {
		Test test = new Test();
		Test.data = 2;
		test.data = 1;
		System.out.print(test.data + Test.data);
	}
}
class Test {    public static int data;   public Test() { data = 0; }          }

//Question 7
public class Main {
	public static void main(String args[]) {
		A a = new A();
		B b = new B();
		C c = new C();
		c = a;
		b = a;
		System.out.println(b);
	}
}

class A extends B {
	public String toString() {
		return "1";
	}
}

class B extends C {
	public String toString() {
		return "2";
	}
}

class C {
	public String toString() {
		return "3";
	}
}
//Question 8
public class Main {
	public static void main(String args[]) {
		A ref = new B();
		ref.data = 3;
		int data = 4;
		ref.show();
	}
}
class A {
	public int data;
	public A() { data = 7; }
	public void show() {
		System.out.println(data);
	}
}
class B extends A {
	public void show() {
		System.out.println(data);
	}
}

//Question 9
public class Main {
	public static void main(String args[]) {
		A ref = new B();
		ref.data = 3;
		int data = 4;
		ref.show(7);
	}
}

class A {
	public int data;

	public void show() {
		System.out.println(data);
	}
}

class B extends A {
	public void show(int data) {
		System.out.println(data);
	}
}

//Question 10
public class Main {
	public static void main(String args[]) {
		A ref = new B();
		ref.data = 3;
		int data = 4;
		((B) ref).show(7);
	}
}

abstract class A {
	public int data;

	public void show() {
		System.out.println(data);
	}
}

class B extends A {
	public void show(int data) {
		System.out.println(data);
	}
}
//Question 10
public class Main {
	public static void main(String args[]) {
		A ref = new B();
		ref.data = 3;
		int data = 4;
		((B) ref).show(7);
	}
}

abstract class A {
	public int data;

	public void show() {
		System.out.println(data);
	}
}

class B extends A {
	public void show(int data) {
		System.out.println(data);
	}
}


//Question 11
public class Main {

  public static void main(String args[]) {
     int score = 65;
     switch (  ( score / 10 ) % 6 ){
       case 0 : System.out.print("0");
       case 1 :
       case 6 : System.out.print("1");
       default: System.out.print("2");
     }

    if ( score/10 == 6) System.out.print("3");
  }
}
//Question 12
public class Main {

  public static void main(String args[]) {
	  int x = 1 , y = 2 , z = 3;
     if ( x != 1 )
    	 System.out.print("A");
    	 if ( y == 2)
    		 System.out.print("B");
     else
    		 if (z == 3)
    			 System.out.print("C");
    		 else
    			 System.out.print("D");

  }
}
//Question 13
public class Main {
	public static void main(String args[]) {
		int x = 1, y = 2, z = 3;
		while (x == 1) {
			System.out.print("A");
			if (y == 2)
				System.out.print("B");
			else if (z == 3) {
				System.out.print("C");
				x = 1;
			} else
				System.out.print("D");
			x = 3;
		}
	}
}


//Question 14
class MyAbstract {
	public int doNothing() {
		System.out.print("abc");
		return 1;
	}
}

public class Main extends MyAbstract {

	public static void main(String args[]) {
		MyAbstract a = new MyAbstract();
		doNothing(a.doNothing());
	}

	public static void doNothing(int dummy) {
		System.out.print("xyz");
	}
}
//Question 15
class Person extends Creature {
	public void print() {
		System.out.print("person");
	}
}

class Creature {
	public void print() {
		System.out.print("creature");
	}
}

public class Main {
	private static void print(Person p) {
		System.out.print("1");
		p.print();
	}

	public static void print(Creature c) {
		System.out.print("2");
		c.print();
	}

	public static void main(String args[]) {
		Creature pCreature = new Person();
		print(pCreature);
	}

}

//Question 16
public class Main {
	public static void main(String args[]) {
		String[] array = new String[2];
		int i = 1;
		try {
			for (i = 0; i < 2; i++) {
				array[i] = new String("9");
				System.out.print(array[i-1]);
			}

		} catch (Exception e) {
			System.out.print("!");
		}

	}
}
//Question 17
public class Main {
	public static void main(String args[]) {
		String[] array = new String[2];
		int i = 1;
		try {
			for (i = 0; i < 2; i++)
				array[i] = new String("9");
			System.out.print(array[i-1]);
		} catch (Exception e) {
			System.out.print("!");
		}

	}
}
//Question 18
public class Main {
	public static void main(String args[]) {
		String[] array = new String[2];
		String str;
		int i = 1;
		try {
			for (i = 0; i < 2; i++)
				str = new String("9");
			System.out.print(array[i-1]);
		} catch (NullPointerException e) {
			System.out.print("!");
		}

	}
}

//Question 19
public class Main {
	public static void renameString (String str) {
		str = "new";
	}
	public static void main(String args[]) {
		String str1 = "old";
		String str2 = new String("old");
		renameString (str1);
		renameString (str1);
		System.out.println(str1+str2);

	}
}
//Question 20
class MyString{
	public String str;
}

public class Main {
	public static void renameString (MyString myStringObject) {
		myStringObject.str = "new";
	}
	public static void main(String args[]) {
		MyString myStringObject = new MyString();
		myStringObject.str = new String("old");
		renameString (myStringObject);

		System.out.println(myStringObject.str);

	}
}
//Question 21
public class Main {
    public static void main(String args[]) {
    	Test test1 = new Test()  , test2 = new Test();
    	test1.data = 2;
    	test2.data = 1;
    	System.out.print( test1.compareTo(test2) + " " + test2.compareTo(test1));
    }
}

class Test implements Comparable <Test>{
     public int data;
     public int compareTo( Test obj) {
    	if ( this.data < 2 + obj.data )  return 1;
    	return 0;
    }
}
//Question 22
public class Main {
	public static void main(String[] args) {
		Item.count = 0;
		Item jar = new Item();
		Item ball = new Item();
		System.out.println(jar.count + ball.count + Item.count);
	}
}

class Item {
	public static int count;

	public Item() {
		count = 1;
		count++;
	}
}
//Question 23
public class Main {
	public static void main(String[] args) {
		Manager manager = new Manager();
		manager.salary = 33;
		System.out.println(manager);
	}
}

abstract class Person {
	abstract public int returnCode();
}

interface Printable {
	public void print();
}

abstract class Employee extends Person implements Printable {
	public int salary;
	public int returnCode() {  return 30;  }
}

class Manager extends Employee {
	public void print(double salary) {
		System.out.println(salary);
	}

	public String toString() {
		return "COP" + salary + returnCode();
	}
}

//Question 24
abstract class Vehicle {
	public abstract void move(int miles);

	public void printInfo() {
		System.out.print("Vehicle ");
	}
}

public class Car extends Vehicle {
	private int distance;

	public void move(int miles) {
		distance = distance + miles;
	}

	public void printInfo() {
		System.out.print("Car ");
	}

	public static void main(String args[]) {
		Vehicle myVehicle = new Vehicle();
		Car myCar = new Car();
		myVehicle.printInfo();
		myCar.printInfo();
	}
}
//Question 25
class Car {
	public static int maxSpeed;
	public void speed() {
		System.out.print(maxSpeed + "MPH");
	}
	public static void start() {
		System.out.print("start");
	}
}

public class Main {
	public static void main(String args[]) {
		Car car1 = new Car(), car2 = null;
		car1.maxSpeed = 90;
		car1 = car2;
		(new Car()).maxSpeed = 120;
		Car.start();
		car1.speed();

	}
}

//Question 26
class Car {
	public static int maxSpeed;
	public void speed() {
		System.out.print(maxSpeed + "MPH");
	}
	public static void start() {
		System.out.print("start");
	}
}

public class Main {
	public static void main(String args[]) {
		Car car1 = new Car(), car2 = new Car();
		car1.maxSpeed = 90;
		car1 = car2;
		(new Car()).maxSpeed = 120;
		Car.start();
		car1.speed();

	}
}
//Question 27
public class Main {
	public static void main(String args[]) {
		String[] array = new String[3];
		int i = 2;

		for (i = 2; i >= 0; i--) {
			array[i] = "1";
		}
		array[1 + i] = "a";

		for (String str : array) {
			System.out.print(str);
		}
	}
}
//Question 28
public class Main {
	public static void main(String args[]) {
		int one = 1;
		String oneString = "1";
		System.out.println(one+one+oneString);

	}
}



//Question 29
class Parent {
	public int x;
	public Parent() {
		x = 1;
	}
}
class Child extends Parent {
	private int x;

	public Child(int x) {
		this.x = x;
		x = super.x;
	}

	public void print(int x) {
		System.out.print(super.x + " " + x + " " + this.x);
	}
}

public class Main {
	public static void main(String args[]) {
		Parent pc = new Child(2);
		((Child) pc).print(3);

	}
}
//Question 30
public class Main {
	public static void main(String args[]) {
		int[] array = { 1, 2 };
		int elem;
		try {
			elem = array[2];
			throw new MyException();

		} catch (MyException me) {
			System.out.print(me);
		} finally {
			System.out.print("!!!");
		}
	}
}

class MyException {

	public String toString() {
		return "My Exception";
	}
}

//Q31
public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        int sum = 0;
        // Calculate the sum of all even numbers in the array
        for (int num : arr) {
            if (num % 2 == 0) {
                sum += num;
            }
        }
        System.out.println("Sum of even numbers: " + sum);
    }
}
//Q32
public class Main {
    public static void main(String[] args) {
        String text = "Hello, World!";
        // Print each character of the string in reverse order
        for (int i = text.length() - 1; i >= 0; i--) {
            System.out.print(text.charAt(i));
        }
    }
}
//Q33
public class Main {
    public static void main(String[] args) {
        int[] nums = {1, 2, 3, 4, 5};
        int target = 6;
        // Find two numbers in the array that sum up to the target value
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target) {
                    System.out.println("Pair found: " + nums[i] + " and " + nums[j]);
                    return;
                }
            }
        }
        System.out.println("No pair found");
    }
}
//Q34
public class Main {
    public static void main(String[] args) {
        int n = 5;
        // Print the Fibonacci sequence up to the nth term
        int first = 0, second = 1;
        System.out.print("Fibonacci Sequence: ");
        for (int i = 0; i < n; i++) {
            System.out.print(first + " ");
            int next = first + second;
            first = second;
            second = next;
        }
    }
}
//Q35
public class Main {
    public static void main(String[] args) {
        String sentence = "This is a sample sentence.";
        // Count the number of words in the sentence
        String[] words = sentence.split(" ");
        int wordCount = words.length;
        System.out.println("Word count: " + wordCount);
    }
}
//Q36
public class Main {
    public static void main(String[] args) {
        int[] numbers = {3, 7, 1, 9, 4, 2, 6, 8, 5};
        // Implement the quicksort algorithm to sort the 'numbers' array in ascending order
        quicksort(numbers, 0, numbers.length - 1);
        System.out.print("Sorted Array: ");
        for (int num : numbers) {
            System.out.print(num + " ");
        }
    }

    public static void quicksort(int[] arr, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);
            quicksort(arr, low, pivotIndex - 1);
            quicksort(arr, pivotIndex + 1, high);
        }
    }

    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        return i + 1;
    }
}
//Q37
import java.util.ArrayList;
import java.util.List;

class Student {
    private String name;
    private int age;

    public Student(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }
}

public class Main {
    public static void main(String[] args) {
        List<Student> studentList = new ArrayList<>();
        studentList.add(new Student("Alice", 20));
        studentList.add(new Student("Bob", 22));
        studentList.add(new Student("Charlie", 19));

        // Find and print the oldest student's name from the list
        int maxAge = Integer.MIN_VALUE;
        String oldestStudentName = "";

        for (Student student : studentList) {
            if (student.getAge() > maxAge) {
                maxAge = student.getAge();
                oldestStudentName = student.getName();
            }
        }

        System.out.println("Oldest student: " + oldestStudentName);
    }
}
//Q38
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        // Calculate and print the sum of all elements in the matrix
        int sum = 0;
        for (int[] row : matrix) {
            for (int num : row) {
                sum += num;
            }
        }
        System.out.println("Sum of matrix elements: " + sum);
    }
}
//Q39
import java.util.HashMap;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
        String text = "This is a sample text. Count the frequency of each word.";
        // Count the frequency of each word in the text and print the results
        String[] words = text.split(" ");
        Map<String, Integer> wordFrequency = new HashMap<>();

        for (String word : words) {
            String cleanedWord = word.replaceAll("[^a-zA-Z]", "").toLowerCase();
            if (!cleanedWord.isEmpty()) {
                wordFrequency.put(cleanedWord, wordFrequency.getOrDefault(cleanedWord, 0) + 1);
            }
        }

        for (Map.Entry<String, Integer> entry : wordFrequency.entrySet()) {
            System.out.println("Word: " + entry.getKey() + ", Frequency: " + entry.getValue());
        }
    }
}
//Q40
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class Main {
    public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(3);

        for (int i = 0; i < 5; i++) {
            final int taskId = i;
            executor.submit(() -> {
                System.out.println("Task " + taskId + " is running.");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println("Task " + taskId + " is completed.");
            });
        }

        executor.shutdown();
        try {
            executor.awaitTermination(5, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
//Q41
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        // Rotate the matrix 90 degrees clockwise and print the result
        int n = matrix.length;
        int[][] rotatedMatrix = new int[n][n];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rotatedMatrix[j][n - 1 - i] = matrix[i][j];
            }
        }

        System.out.println("Rotated Matrix:");
        for (int[] row : rotatedMatrix) {
            System.out.println(Arrays.toString(row));
        }
    }
}

//Q42
import java.util.concurrent.*;

public class Main {
    public static void main(String[] args) {
        int n = 10;
        ExecutorService executor = Executors.newFixedThreadPool(3);
        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();

        // Generate and submit tasks to the thread pool to calculate factorials
        for (int i = 1; i <= n; i++) {
            final int num = i;
            executor.submit(() -> {
                int factorial = calculateFactorial(num);
                queue.add(factorial);
            });
        }

        // Retrieve and print the results from the queue
        for (int i = 1; i <= n; i++) {
            try {
                int result = queue.take();
                System.out.println(i + "! = " + result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        executor.shutdown();
    }

    public static int calculateFactorial(int num) {
        if (num == 0 || num == 1) {
            return 1;
        }
        return num * calculateFactorial(num - 1);
    }
}

//Q43
import java.util.concurrent.*;

public class Main {
    public static void main(String[] args) {
        int n = 100;
        ExecutorService executor = Executors.newFixedThreadPool(4);

        // Create a list of tasks to calculate the factorial of numbers from 1 to n
        CompletionService<Long> completionService = new ExecutorCompletionService<>(executor);

        for (int i = 1; i <= n; i++) {
            final int num = i;
            completionService.submit(() -> {
                long factorial = calculateFactorial(num);
                Thread.sleep(100); // Simulate some computation time
                return factorial;
            });
        }

        long totalFactorial = 0;

        // Retrieve and multiply the results from completed tasks
        for (int i = 1; i <= n; i++) {
            try {
                Future<Long> result = completionService.take();
                totalFactorial *= result.get(); // Multiply the factorial results
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        }

        System.out.println("Product of factorials: " + totalFactorial);
        executor.shutdown();
    }

    public static long calculateFactorial(int num) {
        if (num == 0 || num == 1) {
            return 1;
        }
        return num * calculateFactorial(num - 1);
    }
}

//Q44
import java.util.concurrent.*;

public class Main {
    public static void main(String[] args) {
        int n = 1000;
        ExecutorService executor = Executors.newFixedThreadPool(4);

        // Create a list of tasks to calculate prime numbers within a range
        CompletionService<String> completionService = new ExecutorCompletionService<>(executor);

        for (int i = 2; i <= n; i++) {
            final int num = i;
            completionService.submit(() -> {
                if (isPrime(num)) {
                    return Integer.toString(num);
                }
                return null;
            });
        }

        // Retrieve and print the prime numbers from completed tasks
        System.out.print("Prime numbers: ");
        for (int i = 2; i <= n; i++) {
            try {
                Future<String> result = completionService.take();
                String primeNumber = result.get();
                if (primeNumber != null) {
                    System.out.print(primeNumber + " ");
                }
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        }

        executor.shutdown();
    }

    public static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i * i <= num; i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }
}

//Q45
import java.util.concurrent.*;

public class Main {
    public static void main(String[] args) {
        int n = 100;
        ExecutorService executor = Executors.newFixedThreadPool(4);

        // Create a list of tasks to calculate the Fibonacci sequence up to the nth term
        CompletionService<Long> completionService = new ExecutorCompletionService<>(executor);

        for (int i = 1; i <= n; i++) {
            final int num = i;
            completionService.submit(() -> {
                long fibonacci = calculateFibonacci(num);
                Thread.sleep(100); // Simulate some computation time
                return fibonacci;
            });
        }

        // Retrieve and print the Fibonacci sequence terms from completed tasks
        System.out.print("Fibonacci sequence: ");
        for (int i = 1; i <= n; i++) {
            try {
                Future<Long> result = completionService.take();
                long fibonacciTerm = result.get();
                System.out.print(fibonacciTerm + " ");
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        }

        executor.shutdown();
    }

    public static long calculateFibonacci(int n) {
        if (n <= 1) {
            return n;
        }
        long[] fib = new long[n + 1];
        fib[0] = 0;
        fib[1] = 1;
        for (int i = 2; i <= n; i++) {
            fib[i] = fib[i - 1] + fib[i - 2];
        }
        return fib[n];
    }
}

//Q46
import java.util.concurrent.*;

public class Main {
    public static void main(String[] args) {
        int n = 1000;
        ExecutorService executor = Executors.newFixedThreadPool(4);

        // Create a list of tasks to check for palindrome numbers within a range
        CompletionService<Integer> completionService = new ExecutorCompletionService<>(executor);

        for (int i = 1; i <= n; i++) {
            final int num = i;
            completionService.submit(() -> {
                if (isPalindrome(num)) {
                    return num;
                }
                return null;
            });
        }

        // Retrieve and print the palindrome numbers from completed tasks
        System.out.print("Palindrome numbers: ");
        for (int i = 1; i <= n; i++) {
            try {
                Future<Integer> result = completionService.take();
                Integer palindromeNumber = result.get();
                if (palindromeNumber != null) {
                    System.out.print(palindromeNumber + " ");
                }
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        }

        executor.shutdown();
    }

    public static boolean isPalindrome(int num) {
        int reversedNum = 0;
        int originalNum = num;

        while (num > 0) {
            int digit = num % 10;
            reversedNum = reversedNum * 10 + digit;
            num /= 10;
        }

        return originalNum == reversedNum;
    }
}

//Q47
import java.util.concurrent.*;

public class Main {
    public static void main(String[] args) {
        int n = 100;
        ExecutorService executor = Executors.newFixedThreadPool(4);

        // Create a list of tasks to calculate the sum of all prime numbers up to n
        CompletionService<Long> completionService = new ExecutorCompletionService<>(executor);

        for (int i = 2; i <= n; i++) {
            final int num = i;
            completionService.submit(() -> {
                if (isPrime(num)) {
                    return (long) num;
                }
                return 0L;
            });
        }

        long totalSum = 0;

        // Retrieve and sum the prime numbers from completed tasks
        for (int i = 2; i <= n; i++) {
            try {
                Future<Long> result = completionService.take();
                long primeNumber = result.get();
                totalSum += primeNumber;
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        }

        System.out.println("Sum of prime numbers up to " + n + ": " + totalSum);
        executor.shutdown();
    }

    public static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i * i <= num; i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }
}
